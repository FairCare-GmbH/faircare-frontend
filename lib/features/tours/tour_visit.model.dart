import 'dart:convert';

import 'package:faircare/features/performance/measurable.model.dart';

class TourVisitModel extends Measurable {
  final int id;
  final int tourId;
  final int type;
  final int patientId;

  final String? desiredStartFrom;
  final String? desiredStartTo;

  TourVisitModel({
    required this.id,
    required this.tourId,
    required this.type,
    required this.patientId,
    required super.tourDate,
    required super.plannedStartTime,
    required super.plannedEndTime,
    required this.desiredStartFrom,
    required this.desiredStartTo,
    required super.actualStartTime,
    required super.actualEndTime,
    required super.plannedCareDuration,
    required super.plannedCommuteDuration,
    required super.actualCareDuration,
    required super.actualCommuteDuration,
    required super.plannedCommuteDistance,
    required super.plannedRevenue,
    required super.maxBonus,
    required super.plannedAdminDuration,
    super.actualAdminDuration,
    required super.plannedBreakDuration,
    super.actualBreakDuration,
    super.rating,
    required super.plannedTaskCount,
    super.actualTaskCount,
    required super.isClosed,
    super.actualBonus,
    required super.hasInfectiousDisease,
    required super.hasMedicalCare,
    required super.hasBasicCare,
    required super.hasWoundCare,
    required super.hasHousekeeping,
    required super.hasCompanionship,
  });

  TourVisitModel copyWith(
          {int? id,
          int? tourId,
          int? type,
          int? patientId,
          DateTime? tourDate,
          String? plannedStartTime,
          String? plannedEndTime,
          String? desiredStartFrom,
          String? desiredStartTo,
          String? actualStartTime,
          String? actualEndTime,
          int? plannedCareDuration,
          int? plannedCommuteDuration,
          int? actualCareDuration,
          int? actualCommuteDuration,
          int? plannedCommuteDistance,
          int? actualCommuteDistance,
          int? plannedRevenue,
          int? maxBonus,
          int? plannedAdminDuration,
          int? actualAdminDuration,
          int? plannedBreakDuration,
          int? actualBreakDuration,
          double? rating,
          int? plannedTaskCount,
          int? actualTaskCount,
          bool? isClosed,
          int? actualBonus,
          bool? hasInfectiousDisease,
          bool? hasMedicalCare,
          bool? hasBasicCare,
          bool? hasWoundCare,
          bool? hasHousekeeping,
          bool? hasCompanionship}) =>
      TourVisitModel(
        id: id ?? this.id,
        tourId: tourId ?? this.tourId,
        type: type ?? this.type,
        patientId: patientId ?? this.patientId,
        tourDate: tourDate ?? this.tourDate,
        plannedStartTime: plannedStartTime ?? this.plannedStartTime,
        plannedEndTime: plannedEndTime ?? this.plannedEndTime,
        desiredStartFrom: desiredStartFrom ?? this.desiredStartFrom,
        desiredStartTo: desiredStartTo ?? this.desiredStartTo,
        actualStartTime: actualStartTime ?? this.actualStartTime,
        actualEndTime: actualEndTime ?? this.actualEndTime,
        plannedCareDuration: plannedCareDuration ?? this.plannedCareDuration,
        plannedCommuteDuration:
            plannedCommuteDuration ?? this.plannedCommuteDuration,
        actualCareDuration: actualCareDuration ?? this.actualCareDuration,
        actualCommuteDuration:
            actualCommuteDuration ?? this.actualCommuteDuration,
        plannedCommuteDistance:
            plannedCommuteDistance ?? this.plannedCommuteDistance,
        plannedRevenue: plannedRevenue ?? this.plannedRevenue,
        maxBonus: maxBonus ?? this.maxBonus,
        plannedAdminDuration: plannedAdminDuration ?? this.plannedAdminDuration,
        actualAdminDuration: actualAdminDuration ?? this.actualAdminDuration,
        actualBreakDuration: actualBreakDuration ?? this.actualBreakDuration,
        rating: rating ?? this.rating,
        plannedTaskCount: plannedTaskCount ?? this.plannedTaskCount,
        actualTaskCount: actualTaskCount ?? this.actualTaskCount,
        isClosed: isClosed ?? this.isClosed,
        actualBonus: actualBonus ?? this.actualBonus,
        plannedBreakDuration: plannedBreakDuration ?? this.plannedBreakDuration,
        hasInfectiousDisease: hasInfectiousDisease ?? this.hasInfectiousDisease,
        hasMedicalCare: hasMedicalCare ?? this.hasMedicalCare,
        hasBasicCare: hasBasicCare ?? this.hasBasicCare,
        hasWoundCare: hasWoundCare ?? this.hasWoundCare,
        hasHousekeeping: hasHousekeeping ?? this.hasHousekeeping,
        hasCompanionship: hasCompanionship ?? this.hasCompanionship,
      );

  factory TourVisitModel.fromRawJson(String str) =>
      TourVisitModel.fromJson(json.decode(str));

  String toRawJson() => json.encode(toJson());

  factory TourVisitModel.fromJson(Map<String, dynamic> json) => TourVisitModel(
        id: json["id"],
        tourId: json["tourId"],
        type: json["type"],
        patientId: json["patientId"],
        tourDate: DateTime.parse(json["tourDate"]),
        plannedStartTime: json["plannedStartTime"],
        plannedEndTime: json["plannedEndTime"],
        desiredStartFrom: json["desiredStartFrom"],
        desiredStartTo: json["desiredStartTo"],
        actualStartTime: json["actualStartTime"],
        actualEndTime: json["actualEndTime"],
        plannedCareDuration: json["plannedCareDuration"],
        plannedCommuteDuration: json["plannedCommuteDuration"],
        actualCareDuration: json["actualCareDuration"],
        actualCommuteDuration: json["actualCommuteDuration"],
        plannedCommuteDistance: json["plannedCommuteDistance"],
        plannedRevenue: json["plannedRevenue"],
        maxBonus: json["maxBonus"],
        plannedAdminDuration: json["plannedAdminDuration"],
        actualAdminDuration: json["actualAdminDuration"],
        actualBreakDuration: json["actualBreakDuration"],
        rating: json["rating"]?.toDouble(),
        plannedTaskCount: json["plannedTaskCount"],
        actualTaskCount: json["actualTaskCount"],
        isClosed: json["isClosed"],
        actualBonus: json["actualBonus"],
        plannedBreakDuration: json["plannedBreakDuration"],
        hasInfectiousDisease: json["hasInfectiousDisease"],
        hasMedicalCare: json["hasMedicalCare"],
        hasBasicCare: json["hasBasicCare"],
        hasWoundCare: json["hasWoundCare"],
        hasHousekeeping: json["hasHousekeeping"],
        hasCompanionship: json["hasCompanionship"],
      );

  Map<String, dynamic> toJson() => {
        "id": id,
        "tourId": tourId,
        "type": type,
        "patientId": patientId,
        "tourDate": tourDate.toIso8601String(),
        "plannedStartTime": plannedStartTime,
        "plannedEndTime": plannedEndTime,
        "desiredStartFrom": desiredStartFrom,
        "desiredStartTo": desiredStartTo,
        "actualStartTime": actualStartTime,
        "actualEndTime": actualEndTime,
        "plannedCareDuration": plannedCareDuration,
        "plannedCommuteDuration": plannedCommuteDuration,
        "actualCareDuration": actualCareDuration,
        "actualCommuteDuration": actualCommuteDuration,
        "plannedCommuteDistance": plannedCommuteDistance,
        "plannedRevenue": plannedRevenue,
        "maxBonus": maxBonus,
        "plannedAdminDuration": plannedAdminDuration,
        "actualAdminDuration": actualAdminDuration,
        "actualBreakDuration": actualBreakDuration,
        "rating": rating,
        "plannedTaskCount": plannedTaskCount,
        "actualTaskCount": actualTaskCount,
        "isClosed": isClosed,
        "actualBonus": actualBonus,
        "plannedBreakDuration": plannedBreakDuration,
        "hasInfectiousDisease": hasInfectiousDisease,
        "hasMedicalCare": hasMedicalCare,
        "hasBasicCare": hasBasicCare,
        "hasWoundCare": hasWoundCare,
        "hasHousekeeping": hasHousekeeping,
        "hasCompanionship": hasCompanionship,
      };
}
